name: ECS Service Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          sparse-checkout: .
      
      - name: Read config.json and set environment variables
        id: read_config
        run: |
          region=$(jq -r '.aws.region' config.json)
          ecrRepositoryName=$(jq -r '.aws.ecrRepositoryName' config.json)
          ecsClusterName=$(jq -r '.aws.ecsClusterName' config.json)
          ecsServiceName=$(jq -r '.aws.ecsServiceName' config.json)
          elbName=$(jq -r '.aws.elbName' config.json)
          ecsTaskExecutionRole=$(jq -r '.aws.ecsTaskExecutionRole' config.json)
          taskdef=$(jq -r '.aws.taskdef' config.json)
          account=$(jq -r '.aws.account' config.json)

          echo "REGION=$region" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_NAME=$ecrRepositoryName" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=$ecsClusterName" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=$ecsServiceName" >> $GITHUB_ENV
          echo "ELB_NAME=$elbName" >> $GITHUB_ENV
          echo "ECS_TASK_ROLE=$ecsTaskExecutionRole" >>$GITHUB_ENV
          echo "TASK_NAME=$taskdef" >>$GITHUB_ENV
          echo "ACCOUNT=$account" >>$GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.REGION }} 

      
      - name: Clear Docker layers and clear yarn cache
        run: |
          docker system prune -af --volumes
          yarn cache clean
      
      - name: Build and push App Docker image
        run: |
            echo "CARGO_NET_GIT_FETCH_WITH_CLI=true" >> $GITHUB_ENV
            docker-compose up --build -d 

      - name: Check if ECS cluster exists
        id: check_cluster
        run: |
          aws ecs describe-clusters --cluster ${{ env.ECS_CLUSTER_NAME}} || exit 0

      - name: Check if ECS repository exists
        id: check_repository
        run: |
            if aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY_NAME }}; then
              echo "Repository already exists"
            else
              echo "Repository does not exist"
              echo "::set-output name=REPO_EXISTS::false"
            fi
        
      - name: Check if ECS task definition exists
        id: check_task_definition
        run: |
            aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_NAME}} || exit 0

      - name: Create ECS cluster if not exists
        if: steps.check_cluster.outputs.stdout == ''
        run: |
          aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER_NAME }}

      - name: Create ECR if not exists
        if: steps.check_repository.outputs.REPO_EXISTS == 'false'
        run: |
            aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY_NAME }}
      
      - name: Push the repository
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG1: app
                
        run: |
            # IMAGE="$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$IMAGE_TAG1"
            # echo "IMAGE_TAG=$IMAGE">>$GITHUB_ENV
            aws ecr get-login-password --region ${{env.REGION}} | docker login --username AWS --password-stdin ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{env.REGION}}.amazonaws.com
            docker tag $IMAGE_TAG1  ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{env.REGION}}.amazonaws.com/$ECR_REPOSITORY_NAME:$IMAGE_TAG1
            docker push  ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{env.REGION}}.amazonaws.com/$ECR_REPOSITORY_NAME:$IMAGE_TAG1
          
      - name: Create task definiton
        id: create_task
        run: | 
              aws ecs register-task-definition \
              --family "${TASK_NAME}" \
              --execution-role-arn "arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/${{env.ECS_TASK_ROLE}}" \
              --container-definitions '[
                      {
                    "name": "App",
                    "image": "'"$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$ECR_REPOSITORY_NAME:app"'",
                    "portMappings": [
                      {
                          "name": "app",
                          "containerPort": 3000,
                          "hostPort": 3000,
                          "protocol": "tcp",
                          "appProtocol": "http"
                      }
                    ],
                    "essential": true
                     }
                    ]' \
               --requires-compatibilities FARGATE \
              --network-mode awsvpc --cpu 1024 --memory 2048


      - name: Update and Run ECS Service
        run: |
            DEFAULT_VPC_ID=$(aws ec2 describe-vpcs --filter "Name=is-default,Values=true" --query "Vpcs[0].VpcId" --region "$REGION" --output text)
            DEFAULT_SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$DEFAULT_VPC_ID" "Name=default-for-az,Values=true" --query "Subnets[*].SubnetId" --region "$REGION" --output text | tr '\t' ',')
            DEFAULT_SECURITY_GROUP=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$DEFAULT_VPC_ID" "Name=group-name,Values='default'" --query "SecurityGroups[0].GroupId" --region "$REGION" --output text | tr '\t' ',')
            SERVICE_EXISTS=$(aws ecs describe-services --cluster "$ECS_CLUSTER_NAME" --services "$ECS_SERVICE_NAME" --region "$REGION" --query "services[?serviceName=='$ECS_SERVICE_NAME'].serviceName" --output text)
            if [ "$SERVICE_EXISTS" = "$ECS_SERVICE_NAME" ]; then
                echo "Service exists. Updating service..."
                aws ecs update-service --cluster "$ECS_CLUSTER_NAME" --service "$ECS_SERVICE_NAME" --task-definition "${TASK_NAME}" --force-new-deployment --region "$REGION"
            else
                EXISTING_LB_ARN=$(aws elbv2 describe-load-balancers --names "$ELB_NAME" --region "$REGION" --query "LoadBalancers[0].LoadBalancerArn" --output text 2>/dev/null)
            
                if [ -z "$EXISTING_LB_ARN" ]; then
                  echo "Load balancer does not exist. Creating load balancer..."
                  ELB_ARN=$(aws elbv2 create-load-balancer --name "$ELB_NAME" --subnets $(echo $DEFAULT_SUBNETS | tr ',' ' ') --security-groups $DEFAULT_SECURITY_GROUP --scheme internet-facing --type application --region "$REGION" --query "LoadBalancers[0].LoadBalancerArn" --output text)
                else
                  echo "Load balancer exists. Using existing load balancer..."
                  ELB_ARN=$EXISTING_LB_ARN
                fi
                TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names sample-group2 --region "$REGION" --query "TargetGroups[0].TargetGroupArn" --output text 2>/dev/null)

                if [ -z "$TARGET_GROUP_ARN" ]; then
                   echo "Target group does not exist. Creating target group..."
                   TARGET_GROUP_ARN=$(aws elbv2 create-target-group --name sample-group2 --protocol HTTPS --port 443 --vpc-id "$DEFAULT_VPC_ID" --target-type ip --health-check-protocol HTTPS --health-check-port 443 --region "$REGION" --query "TargetGroups[0].TargetGroupArn" --output text)
                else
                  echo "Target group already exists. Updating target group..."
                  aws elbv2 modify-target-group --target-group-arn "$TARGET_GROUP_ARN" --health-check-protocol HTTPS --health-check-port 443 --region "$REGION"
                fi

                echo "TARGET_GROUP_ARN=$TARGET_GROUP_ARN" >> $GITHUB_ENV
                echo "ELB_ARN=$ELB_ARN" >> $GITHUB_ENV
                echo "Service does not exist. Creating service..."
                aws ecs create-service \
                --cluster "$ECS_CLUSTER_NAME" \
                --service-name "$ECS_SERVICE_NAME" \
                --task-definition "${TASK_NAME}" \
                --desired-count 1 \
                --launch-type "FARGATE" \
                --network-configuration "awsvpcConfiguration={subnets=[$DEFAULT_SUBNETS],securityGroups=[$DEFAULT_SECURITY_GROUP],assignPublicIp=ENABLED}" \
                --load-balancers "targetGroupArn=$TARGET_GROUP_ARN,containerName=App,containerPort=3000" \
                --region "$REGION"
            fi
            
        
      
      
