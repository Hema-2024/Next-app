name: Deploy to Amazon ECS

on:
  workflow_run:
    workflows: ["Build and push"]
    types:
      - completed

env:
  AWS_REGION: us-east-2                 
  ECR_REPOSITORY: nextjs           
  ECS_CLUSTER: Next-app                
  ECS_TASK_DEFINITION: ../../nextjs.json 
#   CONTAINER_NAME: docker    
  SERVICE_NAME: App-service
jobs:
    deploy:
      name: Deploy
      runs-on: ubuntu-latest
  
      steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-2

      - name: Checkout repository
        uses: actions/checkout@v2
  
      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
     
      - name: Pull the repository
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nextjs # Replace with your repository name
          IMAGE_TAG1: app
          IMAGE_TAG2: localhost
        run: |
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1
            docker run --rm --network=next-app_default -e DATABASE_URL="postgresql://postgres:12345@db:5432/workstatus" $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1 npx prisma migrate deploy


      - name: Push the repository
        env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              ECR_REPOSITORY: nextjs # Replace with your repository name
              IMAGE_TAG1: app
              IMAGE_TAG2: localhost
        run: |
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1
    
      - name: Register task definition
        run: |
            TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition app --query "taskDefinition.taskDefinitionArn" --output text)
            echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
      - name: Update and Run ECS Service
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $SERVICE_NAME --task-definition $TASK_DEF_ARN --force-new-deployment

      
      
